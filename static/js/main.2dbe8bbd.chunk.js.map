{"version":3,"sources":["ColorGame.js","App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","onClick","this","props","className","style","opacity","color","hidden","backgroundColor","toHex","React","Component","Color","r","g","b","Object","classCallCheck","toString","padStart","Board","_this","i","colors","map","ColorGame_Square","key","ColorGame","_React$Component3","_this2","possibleConstructorReturn","getPrototypeOf","call","difficulty","state","getColors","selected","Math","round","random","lives","score","currentScore","gameOver","newGame","bind","assertThisInitialized","reset","inherits","createClass","value","setState","_this3","timerID","setInterval","tick","clearInterval","slice","idx","indexOf","fill","setTimeout","onGameOver","push","console","log","toRgb","_this4","type","min","max","onChange","e","changeDifficulty","target","displayColor","ColorGame_Board","clicked","App","ColorGame_ColorGame","alert","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAEMA,0LAGE,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,QAASC,KAAKC,MAAMF,QAASG,UAAU,SAASC,MAAO,CAC/DC,QAASJ,KAAKC,MAAMI,MAAMC,OAAS,IAAM,IACzCC,gBAAiBP,KAAKC,MAAMI,MAAMG,kBALzBC,IAAMC,YAUrBC,aAMF,SAAAA,EAAYC,EAAGC,EAAGC,GAAIC,OAAAC,EAAA,EAAAD,CAAAf,KAAAW,GAAAX,KALtBY,EAAI,EAKiBZ,KAJrBa,EAAI,EAIiBb,KAHrBc,EAAI,EAGiBd,KAFrBM,QAAS,EAGLN,KAAKY,EAAIA,EACTZ,KAAKc,EAAIA,EACTd,KAAKa,EAAIA,sDAIT,MAAO,OAASb,KAAKY,EAAI,IAAMZ,KAAKa,EAAI,IAAMb,KAAKc,EAAI,oCAGvD,MAAO,IACHd,KAAKY,EAAEK,SAAS,IAAIC,SAAS,EAAG,KAChClB,KAAKa,EAAEI,SAAS,IAAIC,SAAS,EAAG,KAChClB,KAAKc,EAAEG,SAAS,IAAIC,SAAS,EAAG,kBAWtCC,mLAEO,IAAAC,EAAApB,KACDqB,EAAI,EACJC,EAAStB,KAAKC,MAAMqB,OAAOC,IAAK,SAAAlB,GAEhC,OADAgB,IACOzB,EAAAC,EAAAC,cAAC0B,EAAD,CAAQC,IAAKJ,EAAGhB,MAAOA,EAAON,QAAS,kBAAMqB,EAAKnB,MAAMF,QAAQM,QAG3E,OAAOT,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SACjBoB,UAVOb,IAAMC,WAcbgB,EAAb,SAAAC,GAEI,SAAAD,EAAYzB,GAAO,IAAA2B,EAAAb,OAAAC,EAAA,EAAAD,CAAAf,KAAA0B,GACfE,EAAAb,OAAAc,EAAA,EAAAd,CAAAf,KAAAe,OAAAe,EAAA,EAAAf,CAAAW,GAAAK,KAAA/B,KAAMC,IAEN,IAAM+B,EAAa/B,EAAM+B,WAAa/B,EAAM+B,WAAa,EAH1C,OAKfJ,EAAKK,MAAQ,CACTD,WAAYA,EACZV,OAAQM,EAAKM,UAAUF,GACvBG,SAAUC,KAAKC,MAAMD,KAAKE,UAAYN,EAAa,IACnDO,MAAO,EACPC,MAAO,EACPC,aAAcT,EACdU,UAAU,GAEdd,EAAKe,QAAUf,EAAKe,QAAQC,KAAb7B,OAAA8B,EAAA,EAAA9B,CAAAa,IACfA,EAAKkB,MAAQlB,EAAKkB,MAAMF,KAAX7B,OAAA8B,EAAA,EAAA9B,CAAAa,IAfEA,EAFvB,OAAAb,OAAAgC,EAAA,EAAAhC,CAAAW,EAAAC,GAAAZ,OAAAiC,EAAA,EAAAjC,CAAAW,EAAA,EAAAD,IAAA,UAAAwB,MAAA,WAoBQjD,KAAKkD,SAAS,CAAEX,MAAO,EAAGC,MAAO,IACjCxC,KAAK8C,UArBb,CAAArB,IAAA,oBAAAwB,MAAA,WAuBwB,IAAAE,EAAAnD,KAChBA,KAAKoD,QAAUC,YACX,kBAAMF,EAAKG,QACX,OA1BZ,CAAA7B,IAAA,uBAAAwB,MAAA,WA+BQM,cAAcvD,KAAKoD,WA/B3B,CAAA3B,IAAA,OAAAwB,MAAA,WAmCwC,IAA5BjD,KAAKiC,MAAMQ,cACfzC,KAAKkD,SAAS,CACVT,aAAczC,KAAKiC,MAAMQ,aAAe,MArCpD,CAAAhB,IAAA,UAAAwB,MAAA,SAyCY5C,GACJ,KAAIL,KAAKiC,MAAMM,OAAS,GAAxB,CACA,IAAIjB,EAAStB,KAAKiC,MAAMX,OAAOkC,QACzBC,EAAMnC,EAAOoC,QAAQrD,GAE3B,GAAIoD,IAAQzD,KAAKiC,MAAME,SAEnBb,EAAOqC,KAAKtD,EAAO,EAAGL,KAAKiC,MAAMD,YAEjChC,KAAKkD,SAAS,CACV5B,OAAQA,EACRkB,MAAOxC,KAAKiC,MAAMO,MAAQxC,KAAKiC,MAAMQ,eAGzCmB,WAAW5D,KAAK8C,MAAO,SACpB,CAEH,IAAIP,EAAQvC,KAAKiC,MAAMM,MAAQ,EAE/BjB,EAAOmC,GAAKnD,QAAS,EACrBN,KAAKkD,SAAS,CAAE5B,OAAQA,EAAQiB,MAAOA,IAEnCA,GAAS,GAAKvC,KAAKC,MAAM4D,YACzB7D,KAAKC,MAAM4D,WAAW7D,KAAKiC,MAAMO,WAhEjD,CAAAf,IAAA,YAAAwB,MAAA,SAqEcjB,GAEN,IADA,IAAIV,EAAS,GACJD,EAAI,EAAGA,EAAIW,EAAYX,IAC5BC,EAAOwC,KA7FR,IAAInD,EACPyB,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,UAChBF,KAAKC,MAAsB,IAAhBD,KAAKE,UAChB,MA2FA,OAAOhB,IA1Ef,CAAAG,IAAA,mBAAAwB,MAAA,SA4EqBjB,GACb+B,QAAQC,IAAIhC,GACZhC,KAAKkD,SAAS,CACVlB,WAAYA,EACZV,OAAQtB,KAAKkC,UAAUF,GACvBG,SAAUC,KAAKC,MAAMD,KAAKE,UAAYN,EAAa,QAjF/D,CAAAP,IAAA,QAAAwB,MAAA,WAqFQjD,KAAKkD,SAAS,CACV5B,OAAQtB,KAAKkC,UAAUlC,KAAKiC,MAAMD,YAClCG,SAAUC,KAAKC,MAAMD,KAAKE,UAAYtC,KAAKiC,MAAMD,WAAa,IAC9DS,aAAczC,KAAKiC,MAAMD,eAxFrC,CAAAP,IAAA,eAAAwB,MAAA,WA4FQ,OAAOjD,KAAKiC,MAAMX,OAAOtB,KAAKiC,MAAME,UAAYnC,KAAKiC,MAAMX,OAAOtB,KAAKiC,MAAME,UAAU8B,QAAU,MA5FzG,CAAAxC,IAAA,SAAAwB,MAAA,WA8Fa,IAAAiB,EAAAlE,KACL,OAAOJ,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,SAAOqE,KAAK,QAAQC,IAAI,IAAIC,IAAI,KAAKpB,MAAOjD,KAAKiC,MAAMD,WAAYsC,SAAU,SAACC,GAAD,OAAOL,EAAKM,iBAAiBD,EAAEE,OAAOxB,UAClHjD,KAAKiC,MAAMM,OAAS,EAAI3C,EAAAC,EAAAC,cAAA,UAAQC,QAASC,KAAK2C,SAAtB,YAAmD,KAC5E/C,EAAAC,EAAAC,cAAA,UAAKE,KAAK0E,gBACV9E,EAAAC,EAAAC,cAAA,sBAAcE,KAAKiC,MAAMQ,cACzB7C,EAAAC,EAAAC,cAAA,oBAAYE,KAAKiC,MAAMO,OACvB5C,EAAAC,EAAAC,cAAA,oBAAYE,KAAKiC,MAAMM,OACvB3C,EAAAC,EAAAC,cAAC6E,EAAD,CAAO5E,QAAS,SAACM,GAAD,OAAW6D,EAAKU,QAAQvE,IAAQiB,OAAQtB,KAAKiC,MAAMX,cAtG/EI,EAAA,CAA+BjB,IAAMC,iBC5CtBmE,MARf,WACE,OACEjF,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAACgF,EAAD,CAAWjB,WAAY,SAACrB,GAAD,OAAWuC,MAAM,0BAA0BvC,QCKpDwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1F,EAAAC,EAAAC,cAACyF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2dbe8bbd.chunk.js","sourcesContent":["import React from 'react';\nimport './ColorGame.css';\nclass Square extends React.Component {\n\n    render() {\n        return <div onClick={this.props.onClick} className=\"square\" style={{\n            opacity: this.props.color.hidden ? '0' : '1',\n            backgroundColor: this.props.color.toHex()\n        }}></div>;\n    }\n}\n\nclass Color {\n    r = 0;\n    g = 0;\n    b = 0;\n    hidden = false;\n\n    constructor(r, g, b) {\n        this.r = r;\n        this.b = b;\n        this.g = g;\n    }\n\n    toRgb() {\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\n    }\n    toHex() {\n        return \"#\" +\n            this.r.toString(16).padStart(2, '0') +\n            this.g.toString(16).padStart(2, '0') +\n            this.b.toString(16).padStart(2, '0');\n    };\n}\nfunction randomColor() {\n    return new Color(\n        Math.round(Math.random() * 255),\n        Math.round(Math.random() * 255),\n        Math.round(Math.random() * 255),\n        255\n    );\n}\nclass Board extends React.Component {\n\n    render() {\n        let i = 0;\n        let colors = this.props.colors.map((color => {\n            i++;\n            return <Square key={i} color={color} onClick={() => this.props.onClick(color)} />;\n        }\n        ));\n        return <div className=\"board\">\n            {colors}\n        </div>;\n    }\n}\nexport class ColorGame extends React.Component {\n    timerID;\n    constructor(props) {\n        super(props);\n\n        const difficulty = props.difficulty ? props.difficulty : 6;\n\n        this.state = {\n            difficulty: difficulty,\n            colors: this.getColors(difficulty),\n            selected: Math.round(Math.random() * (difficulty - 1)),\n            lives: 3,\n            score: 0,\n            currentScore: difficulty,\n            gameOver: false,\n        };\n        this.newGame = this.newGame.bind(this);\n        this.reset = this.reset.bind(this);\n    }\n    newGame() {\n        this.setState({ lives: 3, score: 0 });\n        this.reset();\n    }\n    componentDidMount() {\n        this.timerID = setInterval(\n            () => this.tick(),\n            10000\n        );\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID);\n    }\n\n    tick() {\n        if (this.state.currentScore === 1) return;\n        this.setState({\n            currentScore: this.state.currentScore - 1\n        });\n    }\n\n    clicked(color) {\n        if (this.state.lives <= 0) return;\n        let colors = this.state.colors.slice();\n        const idx = colors.indexOf(color);\n\n        if (idx === this.state.selected) {\n            // correct color\n            colors.fill(color, 0, this.state.difficulty);\n\n            this.setState({\n                colors: colors,\n                score: this.state.score + this.state.currentScore\n            });\n\n            setTimeout(this.reset, 1000);\n        } else {\n            // wrong color\n            let lives = this.state.lives - 1;\n\n            colors[idx].hidden = true;\n            this.setState({ colors: colors, lives: lives });\n\n            if (lives <= 0 && this.props.onGameOver) {\n                this.props.onGameOver(this.state.score);\n            } \n        }\n    }\n\n    getColors(difficulty) {\n        let colors = [];\n        for (let i = 0; i < difficulty; i++) {\n            colors.push(randomColor());\n        }\n        return colors;\n    }\n    changeDifficulty(difficulty) {\n        console.log(difficulty);\n        this.setState({\n            difficulty: difficulty,\n            colors: this.getColors(difficulty),\n            selected: Math.round(Math.random() * (difficulty - 1))\n        });\n    }\n    reset() {\n        this.setState({\n            colors: this.getColors(this.state.difficulty),\n            selected: Math.round(Math.random() * (this.state.difficulty - 1)),\n            currentScore: this.state.difficulty\n        });\n    }\n    displayColor() {\n        return this.state.colors[this.state.selected] ? this.state.colors[this.state.selected].toRgb() : '?';\n    }\n    render() {\n        return <div>\n            <input type=\"range\" min='2' max='15' value={this.state.difficulty} onChange={(e) => this.changeDifficulty(e.target.value)} ></input>\n            {this.state.lives <= 0 ? <button onClick={this.newGame}>New Game</button> : null}\n            <h3>{this.displayColor()}</h3>\n            <h3>Current: {this.state.currentScore}</h3>\n            <h3>Score: {this.state.score}</h3>\n            <h3>Lives: {this.state.lives}</h3>\n            <Board onClick={(color) => this.clicked(color)} colors={this.state.colors}></Board>\n        </div>\n    }\n}","import React from 'react';\nimport {ColorGame} from './ColorGame';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ColorGame onGameOver={(score) => alert(\"Game Over! \\n\\n Score: \"+score)} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}