{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","onClick","this","props","className","style","opacity","color","hidden","backgroundColor","toHex","React","Component","Color","r","g","b","Object","classCallCheck","toString","padStart","Board","_this","i","colors","map","App_Square","key","Game","_this2","possibleConstructorReturn","getPrototypeOf","call","difficulty","state","getColors","selected","Math","round","random","clicked","bind","assertThisInitialized","console","log","slice","idx","indexOf","fill","setState","push","toRgb","_this3","type","min","max","value","onChange","e","changeDifficulty","target","reset","displayColor","App_Board","App","App_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdf25b5f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Square extends React.Component {\n\n  render() {\n    return <div onClick={this.props.onClick} className=\"square\" style={{\n      opacity: this.props.color.hidden ? '0' : '1',\n      backgroundColor: this.props.color.toHex()\n    }}></div>;\n  }\n}\n\nclass Color {\n  r = 0;\n  g = 0;\n  b = 0;\n  hidden = false;\n\n  constructor(r, g, b) {\n    this.r = r;\n    this.b = b;\n    this.g = g;\n  }\n\n  toRgb() {\n    return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\n  }\n  toHex() {\n    return \"#\" +\n      this.r.toString(16).padStart(2, '0') +\n      this.g.toString(16).padStart(2, '0') +\n      this.b.toString(16).padStart(2, '0');\n  };\n}\nfunction randomColor() {\n  return new Color(\n    Math.round(Math.random() * 255),\n    Math.round(Math.random() * 255),\n    Math.round(Math.random() * 255),\n    255\n  );\n}\nclass Board extends React.Component {\n\n  render() {\n    let i = 0;\n    let colors = this.props.colors.map((color =>{\n      i++;\n      return <Square key={i} color={color} onClick={() => this.props.onClick(color)} />;\n    }\n    ));\n    return <div className=\"board\">\n      {colors}\n    </div>;\n  }\n}\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const difficulty = props.difficulty ? props.difficulty : 6;\n\n    this.state = {\n      difficulty: difficulty,\n      colors: this.getColors(difficulty),\n      selected: Math.round(Math.random() * (difficulty - 1))\n    };\n    this.clicked.bind(this);\n  }\n\n  clicked(color) {\n    console.log(this);\n\n    let colors = this.state.colors.slice();\n    const idx = colors.indexOf(color);\n    if (idx === this.state.selected) {\n      colors.fill(color, 0, this.state.difficulty);\n    } else {\n      colors[idx].hidden = true;\n    }\n\n    this.setState({ colors: colors });\n  }\n\n  getColors(difficulty) {\n    let colors = [];\n    for (let i = 0; i < difficulty; i++) {\n      colors.push(randomColor());\n    }\n    return colors;\n  }\n  changeDifficulty(difficulty) {\n    console.log(difficulty);\n    this.setState({\n      difficulty: difficulty,\n      colors: this.getColors(difficulty),\n      selected: Math.round(Math.random() * (this.state.difficulty - 1))\n    });\n  }\n  reset() {\n    this.setState({\n      colors: this.getColors(this.state.difficulty),\n      selected: Math.round(Math.random() * (this.state.difficulty - 1))\n    });\n  }\n  displayColor() {\n    return this.state.colors[this.state.selected]?this.state.colors[this.state.selected].toRgb():'?';\n  }\n  render() {\n    return <div>\n      <input type=\"range\" min='2' max='15' value={this.state.difficulty} onChange={(e) => this.changeDifficulty(e.target.value)} ></input>\n      <button onClick={() => this.reset()}>Reset</button>\n      <h3>{this.displayColor()}</h3>\n      <h3>{this.state.selected}</h3>\n      <Board onClick={(color) => this.clicked(color)} colors={this.state.colors}></Board>\n    </div>\n  }\n}\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}