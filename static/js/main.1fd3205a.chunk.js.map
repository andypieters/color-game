{"version":3,"sources":["ColorGame.js","App.js","serviceWorker.js","index.js"],"names":["Square","react_default","a","createElement","className","onClick","this","props","style","opacity","color","hidden","backgroundColor","toHex","React","Component","Color","r","g","b","Object","classCallCheck","toString","padStart","Board","_this","i","colors","map","ColorGame_Square","key","ColorGame","_React$Component3","_this2","possibleConstructorReturn","getPrototypeOf","call","totalLives","difficulty","highScore","localStorage","getItem","state","getColors","selected","Math","round","random","lives","score","gameOver","mode","newGame","bind","assertThisInitialized","reset","switchMode","inherits","createClass","value","newMode","setState","slice","idx","indexOf","fill","setTimeout","setItem","alert","push","currentScore","toRgb","_this3","Heart","broken","displayColor","ColorGame_Board","clicked","classNames","join","App","ColorGame_ColorGame","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1fd3205a.chunk.js","sourcesContent":["import React from 'react';\nimport './ColorGame.css';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './bootstrap.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nclass Square extends React.Component {\n\n    render() {\n        return <div className='col-4 col-lg-2 col-md-3 mb-2'>\n            <div onClick={this.props.onClick} className=\"square \" style={{\n                opacity: this.props.color.hidden ? '0' : '1',\n                backgroundColor: this.props.color.toHex()\n            }}></div>\n        </div>;\n    }\n}\n\nclass Color {\n    r = 0;\n    g = 0;\n    b = 0;\n    hidden = false;\n\n    constructor(r, g, b) {\n        this.r = r;\n        this.b = b;\n        this.g = g;\n    }\n\n    toRgb() {\n        return \"rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\n    }\n    toHex() {\n        return \"#\" +\n            this.r.toString(16).padStart(2, '0') +\n            this.g.toString(16).padStart(2, '0') +\n            this.b.toString(16).padStart(2, '0');\n    };\n}\nfunction randomColor() {\n    return new Color(\n        Math.round(Math.random() * 255),\n        Math.round(Math.random() * 255),\n        Math.round(Math.random() * 255),\n        255\n    );\n}\nclass Board extends React.Component {\n\n    render() {\n        let i = 0;\n        let colors = this.props.colors.map((color => {\n            i++;\n            return <Square key={i} color={color} onClick={() => this.props.onClick(color)} />;\n        }\n        ));\n        return <div className=\"row\">\n            {colors}\n        </div>;\n    }\n}\nexport class ColorGame extends React.Component {\n    timerID;\n    totalLives = 5;\n    constructor(props) {\n        super(props);\n\n        const difficulty = props.difficulty ? props.difficulty : 6;\n\n        let highScore = localStorage.getItem('highScore') || 0;\n\n        this.state = {\n            difficulty: difficulty,\n            colors: this.getColors(difficulty),\n            selected: Math.round(Math.random() * (difficulty - 1)),\n            lives: this.totalLives,\n            score: 0,\n            highScore: highScore,\n            gameOver: false,\n            mode: 'rgb'\n        };\n        this.newGame = this.newGame.bind(this);\n        this.reset = this.reset.bind(this);\n        this.switchMode = this.switchMode.bind(this);\n    }\n    switchMode() {\n        const newMode = this.state.mode === 'rgb' ? 'hex' : 'rgb';\n        this.setState({ mode: newMode });\n    }\n    newGame() {\n        this.setState({ lives: this.totalLives, score: 0 });\n        this.reset();\n    }\n\n    clicked(color) {\n        if (this.state.lives <= 0) return;\n        let colors = this.state.colors.slice();\n        const idx = colors.indexOf(color);\n\n        if (idx === this.state.selected) {\n            // correct color\n            colors.fill(color, 0, this.state.difficulty);\n\n            this.setState({\n                colors: colors,\n                score: this.state.score + 1\n            });\n\n            setTimeout(this.reset, 1000);\n        } else {\n            // wrong color\n            let lives = this.state.lives - 1;\n\n            colors[idx].hidden = true;\n            this.setState({ colors: colors, lives: lives });\n\n            if (lives <= 0) {\n                this.gameOver();\n            }\n        }\n    }\n    gameOver() {\n        if (this.state.score > this.state.highScore) {\n            localStorage.setItem('highScore', this.state.score);\n            this.setState({ highScore: this.state.score, gameOver: true });\n            alert('New highscore!');\n        } else {\n            this.setState({ gameOver: true })\n            alert('Game over!');\n        }\n\n        this.newGame();\n    }\n    getColors(difficulty) {\n        let colors = [];\n        for (let i = 0; i < difficulty; i++) {\n            colors.push(randomColor());\n        }\n        return colors;\n    }\n    changeDifficulty(difficulty) {\n        this.setState({\n            difficulty: difficulty,\n            colors: this.getColors(difficulty),\n            selected: Math.round(Math.random() * (difficulty - 1))\n        });\n    }\n    reset() {\n        this.setState({\n            colors: this.getColors(this.state.difficulty),\n            selected: Math.round(Math.random() * (this.state.difficulty - 1)),\n            currentScore: this.state.difficulty\n        });\n    }\n    displayColor() {\n        let color = this.state.colors[this.state.selected];\n\n        return this.state.mode === 'rgb' ? color.toRgb() : color.toHex();\n    }\n    render() {\n        let lives = [];\n        for (let i = 0; i < this.totalLives; i++) {\n            lives.push(\n                <Heart key={i} broken={this.state.lives < i + 1}></Heart>\n            );\n        }\n\n        return <div className='container'>\n            <h3>highScore: {this.state.highScore}</h3>\n            <h3>Score: {this.state.score}</h3>\n            <h3>{lives}</h3>\n            <h1 onClick={this.switchMode}>{this.displayColor()}</h1>\n            <Board onClick={(color) => this.clicked(color)} colors={this.state.colors}></Board>\n        </div>\n    }\n}\n\nfunction Heart(props) {\n    let classNames = ['fas', 'life'];\n    if (props.broken) {\n        classNames.push('fa-heart-broken', 'lightgray');\n    } else {\n        classNames.push('fa-heart', 'red');\n    }\n    return <i className={classNames.join(' ')}></i>;\n}\n","import React from 'react';\nimport {ColorGame} from './ColorGame';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ColorGame difficulty=\"9\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}